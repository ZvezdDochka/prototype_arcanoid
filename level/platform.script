go.property("speed", 0)

local function limitX(self, x)
	local width = go.get("#sprite", "size.x")
	--if (x - width/2) <= 0 then
	if x <= 0 then
		self.x_mouse_pos = width/2
	--elseif (x + width/2) >= SCREEN_WIDTH then
	elseif x >= SCREEN_WIDTH then
		self.x_mouse_pos = SCREEN_WIDTH - width/2
	else
		self.x_mouse_pos = x
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	--msg.post("#hands_collision", "disable")
end

function fixed_update(self, dt)
	if self.x_mouse_pos then
		self.pos = go.get_world_position()
		
		if self.last_pos then
			local sp = math.abs(self.last_pos.x - self.pos.x)
			if sp ~= self.speed then
				self.speed = (math.abs(self.last_pos.x - self.pos.x))/dt
			end
		end
		local pos = vmath.vector3(self.x_mouse_pos, self.pos.y, self.pos.z)
		go.set_position(pos) -- двигаем платформу при движении мыши
		self.last_pos = pos

		msg.post("#platform_interface", "change_position", {pos = pos})
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("Return_world_coordinate") then -- получаем позицию мыши в мировых координатах
		limitX(self, message.x) -- ограничиваем по краям
	end

	if message_id == hash("ball_is_ready") then
		self.fixed_ball = message.ball_id
		msg.post(self.fixed_ball, "set_parent", { parent_id = go.get_id(), keep_world_transform = 1 }) -- когда шарик готов, приклеиваем его к платформе
	end
end

function on_input(self, action_id, action)
	msg.post("@render:", "Get_world_coordinate", {x = action.x, y = action.y, z = action.z}) -- отправлем запрос на получение мировых координат

	if action_id == hash("touch") then
		if self.fixed_ball and action.pressed then
			local pos = go.get_position()
			local dir = 1 if pos.x < SCREEN_WIDTH/2 then dir = -1 end -- если платформа ближе к правой стороне, то кидаем шарик вправо, если к левой, то влево

			msg.post(self.fixed_ball, "set_parent", { keep_world_transform = 1 }) -- отвязываем шарик от платформы
			msg.post(self.fixed_ball, "ball_released", {dir = dir}) -- посылаем в выбранном направлении
			
			self.fixed_ball = nil
		end
	end
end
